{"version":3,"sources":["components/Nav.js","components/Home.js","components/Articles.js","components/Article.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Nav","className","exact","to","React","Component","Home","Articles","articleList","articles","props","undefined","map","s","link","key","pathname","state","title","lead","this","connect","Article","article","content","dangerouslySetInnerHTML","__html","ownProps","match","params","article_id","find","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","App","collection","onSnapshot","docs","forEach","doc","articleInfo","data","id","push","updateArticles","path","component","dispatch","newArticles","type","Boolean","window","location","hostname","initState","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wYAsBeA,E,uKAXX,OACE,yBAAKC,UAAU,OACb,4BACE,4BAAI,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,iBAAlB,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,yBAAZ,mB,GATIC,IAAMC,WCYTC,G,6KARX,OACE,yBAAKL,UAAU,QACb,wC,GAPWG,IAAMC,Y,gBCGnBE,E,4MAGFC,YAAc,WACV,IAAIC,EAAW,EAAKC,MAAMD,SAE1B,YAAgBE,IAAbF,EACQ,KAKOA,EAASG,KAAI,SAASC,GACpC,IAAIC,EAAO,yBAA2BD,EAAEE,IACxC,OACA,yBAAKA,IAAKF,EAAEE,KACZ,4BAAI,kBAAC,IAAD,CAAMZ,GAAI,CACVa,SAAUF,EACVG,MAAO,CACHF,IAAKF,EAAEE,OAEXF,EAAEK,QACN,2BAAIL,EAAEM,W,uDAUd,OACE,yBAAKlB,UAAU,YACZmB,KAAKZ,mB,GAlCSJ,IAAMC,WA8CZgB,eANO,SAACJ,GACrB,MAAO,CACLR,SAAUQ,EAAMR,YAILY,CAAyBd,GC/CpCe,G,6KAIF,IAAIJ,OAA+BP,IAAvBS,KAAKV,MAAMa,QAAwB,oBAAsBH,KAAKV,MAAMa,QAAQL,MACpFM,OAAiCb,IAAvBS,KAAKV,MAAMa,QAAwB,GAAKH,KAAKV,MAAMa,QAAQC,QACzE,OACE,yBAAKvB,UAAU,WACb,4BAAKiB,GACL,yBAAKO,wBAAyB,CAAEC,OAAQF,U,GAT1BpB,IAAMC,YAsBbgB,eAPS,SAACJ,EAAOU,GAC9B,IAAIZ,EAAMY,EAASC,MAAMC,OAAOC,WAChC,MAAO,CACLP,QAASN,EAAMR,SAASsB,MAAK,SAAAR,GAAO,OAAIA,EAAQR,MAAQA,QAI7CM,CAAyBC,G,OCHxCU,gBAZuB,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMnB,IAAMC,EAAKT,cAcLU,E,kLAGc,IAAD,OAEjBD,EAAGE,WAAW,YAAYC,YAAW,SAAAnC,GACnC,IAAID,EAAc,GAClBC,EAASoC,KAAKC,SAAQ,SAAAC,GACpB,IAAIC,EAAcD,EAAIE,OAClBC,EAAK,CAACnC,IAAKgC,EAAIG,IACnBF,EAAW,2BAAOA,GAAgBE,GAClC1C,EAAY2C,KAAKH,MAGnB,EAAKtC,MAAM0C,eAAe5C,Q,+BAK1B,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACmD,KAAK,gBAAgBC,UAAWhD,IAC7C,kBAAC,IAAD,CAAOJ,OAAK,EAACmD,KAAK,wBAAwBC,UAAW/C,IACrD,kBAAC,IAAD,CAAOL,OAAK,EAACmD,KAAK,oCAAoCC,UAAWhC,U,GAzBzDlB,IAAMC,WA4CTgB,eAZS,SAACJ,GACrB,MAAO,CACLR,SAAUQ,EAAMR,aAIK,SAAC8C,GAC1B,MAAO,CACLH,eAAgB,SAACI,GAAiBD,EAAS,CAACE,KAAM,kBAAmBD,YAAaA,QAIvEnC,CAA4CqB,GC1EvCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2D,YClBAkC,EAAY,CACdrD,SAAU,CACN,CAACM,IAAK,EAAGG,MAAO,MAAOM,QAAS,YAChC,CAACT,IAAK,EAAGG,MAAO,SAAUM,QAAS,WACnC,CAACT,IAAK,EAAGG,MAAO,QAASM,QAAS,gBAgB3BuC,EAZK,WAAgC,IAA/B9C,EAA8B,uDAAtB6C,EAAWE,EAAW,uCAC/C,GAAmB,oBAAhBA,EAAOP,KAA2B,CACjC,IAAID,EAAcQ,EAAOR,YACzB,MAAM,CACF/C,SAAU+C,GAGd,OAAOvC,GCLTgD,EAAQC,YAAYH,GAE1BI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.608a0bf7.chunk.js","sourcesContent":["import React from 'react';\nimport \"../css/Nav.css\"\nimport {NavLink} from 'react-router-dom'\n// import Link from 'react-router-dom'\n\n\nclass Nav extends React.Component {\n\n\n\nrender(){\n    return (\n      <div className=\"Nav\">\n        <ul>\n          <li><NavLink exact to=\"/doodadReact/\">Home</NavLink></li>\n          <li><NavLink to=\"/doodadReact/articles\">Articles</NavLink></li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Nav;\n","import React from 'react';\nimport \"../css/Home.css\"\n\n\n\nclass Home extends React.Component {\n\n\n\nrender(){\n    return (\n      <div className=\"Home\">\n        <p>Home</p>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport \"../css/Articles.css\"\nimport {Link} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\n\n\n\nclass Articles extends React.Component {\n\n\n    articleList = () => {\n        var articles = this.props.articles;\n\n        if(articles === undefined){\n            return null\n        }\n\n        //const sanitizer = dompurify.sanitize;\n\n        var articleList = articles.map(function(s){\n            var link = \"/doodadReact/articles/\" + s.key\n            return (\n            <div key={s.key}>\n            <h1><Link to={{\n                pathname: link,\n                state: {\n                    key: s.key\n                }\n            }}>{s.title}</Link></h1>\n            <p>{s.lead}</p>\n            </div>\n            );\n        });\n        return articleList\n    }\n\n\nrender(){\n\n    return (\n      <div className=\"Articles\">\n        {this.articleList()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      articles: state.articles\n    }\n  }\n  \n  export default connect(mapStateToProps)(Articles);","import React from 'react';\nimport \"../css/Article.css\"\nimport {connect} from 'react-redux'\n//import dompurify from 'dompurify'\n\n\n\nclass Article extends React.Component {\n\n\nrender(){\n    var title = this.props.article === undefined ? \"Cant find article\" : this.props.article.title;\n    var content = this.props.article === undefined ? \"\" : this.props.article.content;\n    return (\n      <div className=\"Article\">\n        <h1>{title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: content }} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  let key = ownProps.match.params.article_id;\n  return {\n    article: state.articles.find(article => article.key === key)\n  }\n}\n\nexport default connect(mapStateToProps)(Article);\n","import React from 'react';\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nimport * as firebase from \"firebase/app\";\nimport \"./css/App.css\"\nimport Nav from \"./components/Nav\"\nimport Home from './components/Home';\nimport Articles from './components/Articles';\nimport Article from './components/Article';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\n\n  // Your web app's Firebase configuration\n  var firebaseConfig = {\n    apiKey: \"AIzaSyAzBrqlSoBpuAhVz8M2qqNyH5Hx7BW8SNU\",\n    authDomain: \"doodad-capital.firebaseapp.com\",\n    databaseURL: \"https://doodad-capital.firebaseio.com\",\n    projectId: \"doodad-capital\",\n    storageBucket: \"doodad-capital.appspot.com\",\n    messagingSenderId: \"811654475890\",\n    appId: \"1:811654475890:web:7eaeea71c7d56f932192eb\",\n    measurementId: \"G-SLSLSBMB4H\"\n  };\n  // Initialize Firebase\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n//const auth = firebase.auth();\nconst db = firebase.firestore();\n// const storage = firebase.storage();\n\n// var storageRef = storage.ref();\n// //var imagesRef = storageRef.child('Images');\n// var spaceRef = storageRef.child('Images/VTIQChart.png').getDownloadURL().then(function(url) {\n//   console.log(url)\n// }).catch(function(error) {\n//   // Handle any errors\n// });\n// console.log(spaceRef.fullPath)\n\n\n\nclass App extends React.Component {\n\n\ncomponentDidMount(){\n  \n  db.collection('articles').onSnapshot(articles => {\n    var articleList = [];\n    articles.docs.forEach(doc => {\n      var articleInfo = doc.data();\n      var id = {key: doc.id}\n      articleInfo = {...articleInfo, ...id}\n      articleList.push(articleInfo);\n    })\n    //console.log(articleList)\n    this.props.updateArticles(articleList)\n  })\n}\n\nrender(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Nav></Nav>\n          <Route exact path=\"/doodadReact/\" component={Home} />\n          <Route exact path=\"/doodadReact/articles\" component={Articles} />\n          <Route exact path=\"/doodadReact/articles/:article_id\" component={Article} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      articles: state.articles\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateArticles: (newArticles) => {dispatch({type: \"UPDATE_ARTICLES\", newArticles: newArticles})}\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    articles: [\n        {key: 1, title: \"ggg\", content: \"sfsdfdsf\"},\n        {key: 2, title: \"gdffgg\", content: \"rgkrdpo\"},\n        {key: 3, title: \"gfsgg\", content: \"s;flksd;fl\"}\n    ]\n}\n\nconst rootReducer = (state = initState, action) => {\n    if(action.type === \"UPDATE_ARTICLES\"){\n        var newArticles = action.newArticles;\n        return{\n            articles: newArticles\n        };\n    }else{\n        return state\n    }\n}\n\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/rootReducer'\n\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}